/*
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
/*
*Created By: Snapp
*Created Date: 18-Jul-2016
*Purpose: Controller for the AttendeeManagementPage
*/
public with sharing class AttendeeManagementController {

    public PageReference sortByContact() {
        return null;
    }


    public PageReference sortByStatus() {
        return null;
    }

        //Duplicate check for existing contacts in event registration
        public Set<Id> dupCheck;
        
        //Search parameters for Event registrations
         public List<Selectoption> eventRegSearch {get;set;}
         public String eventRegS {get;set;}
         public String erSearch {get;set;}
         public List<Selectoption> attendedStat {get;set;}
         public List<Selectoption> teamActRole {get;set;}
         public list<Selectoption> regType{get;set;}
         
        //private final BCAP_Event__c firstOne;
        
        public String bcapEventId; //Survey Id  
        public BCAP_Event__c bcapEvent {get;set;}
        public   List<Selectoption> searchOptions {get;set;} //Picklist for Search Options to find a contact======static added
        public String searchMethod {get;set;} //Selected option to search for contacts
        public List<ContactWrapper> contactList {get;set;}
        public List<ContactWrapper> contactListFilter {get;set;}
        public List<AttendeeWrapper> regList {get;set;}
        public List<AttendeeWrapper> regList_one {get;set;}
        
        //Member Block Population
        public Map<Id,Id> memBlockMap;
        
        
        //Attended popup logic
        public boolean attended {get;set;}
        public List<SelectOption> options {get;set;}
        public String otherText {get;set;}
        public String pickValue {get;set;}
        
        //Search by Account
        public String accName ;
        public List<Account> accList {get;set;}
        public String accId{get;set;}
        public String selectedAccount {get;set;}
        
        //Search by Contact
        public String conName;
        public String conEmail;
        
    //Contacts by Roles
    public boolean isByContactRole{get;set;}
    
        public boolean popAccount {get;set;} //pop up window for account list
        public void showPopAccount (){
                popAccount=true;
        }
        public void hidePopAccount(){
                popAccount=false;
        }
        
        public class ContactWrapper{
                public Contact c {get;set;}
                public boolean selected {get;set;}
                public String role {get;set;}
                public boolean isPrimary {get;set;}
                public ContactWrapper(Contact c){
                        this.c=c;
                        this.selected=false;
                        this.isPrimary=false;
                                for(Activation_Team__c acr : c.Activation_Team__r){
                                        if(acr.Contact__r.AccountId==c.AccountId)
                                                {this.role=acr.AT_Role__c;this.isPrimary=acr.Primary__c;break;}
                                }
                        }
                
                }
        
        
        public boolean popNewCon {get;set;} //pop up window for adding a new contact
        public void showPopNewCon (){
                popNewCon=true;
        }
        public void hidePopNewCon(){
                popNewCon=false;
        }
        public Contact newCon {get;set;}
        
        public boolean popup2 {get;set;} //pop up window for mass update status of attendee
        public void showPopup2 (){
                        isCreate='false';
                        isCreate = Apexpages.currentPage().getParameters().get('isCreate');
                popup2=true;
        }
        public void hidePopup2(){
                popup2=false;
        }
        
        public boolean popup4 {get;set;} //pop up window for Attended button logic
        public void showPopup4 (){
                popup4=true;
        }
        public void hidePopup4(){
                popup4=false;
        }
        
        //For update popUp
        public List<Selectoption> statusOptions {get;set;} //Picklist for Attendee status
        public String massStatus {get;set;}
        public String isCreate {get;set;}
        public String massGuestOf {get;set;}
        public List<Selectoption> memAccPick {get;set;}
        public List<Selectoption> memConPick {get;set;}
        public String memAcc {get;set;}
        
        public class AttendeeWrapper{
                public Event_Registration__c att {get;set;}
                public boolean selected {get;set;}
                public AttendeeWrapper(Event_Registration__c att){
                        this.att=att;
                        this.selected=false;
                }
        }
        
        //filter by contact role
        public List<Selectoption> conRoles {get;set;}
        public String selectedConRole {get;set;}
        public boolean filtered {get;set;}
        
        public boolean popup3 {get;set;} //pop up window for mass email to attendees
        public void showPopup3 (){
                popup3=true;
        }
        public void hidePopup3(){
                popup3=false;
        }
        
        //Send Email to Attendees
        public List<SelectOption> eTemplateOptions {get;set;}
        public String selectedTemplate {get;set;}
        
        public AttendeeManagementController(/*ApexPages.StandardController ctrl*/){
                
                filterOptionsList = new list<FilterOptions>();
        counter=0;
        filterConditions = new list<Selectoption>();
        filterConditions.add(new Selectoption('AND','AND'));
        filterConditions.add(new Selectoption('OR','OR'));


                //this.firstOne = (BCAP_Event__c)stdController.getRecord();
                
                //initialization
                accList=new List<Account>();
                                
                isByContactRole=false;
        
                popAccount=false;
                popNewCon=false;
                filtered=false;
                
                
                
                if(ApexPages.currentPage().getParameters().get('id')!=null)
                        bcapEventId=ApexPages.currentPage().getParameters().get('id');
                //else if(firstOne!=null && firstOne.Id !=null)
                //      bcapEventId     = firstOne.Id;
                if(bcapEventId==null)
                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,'Error: BCAP Event Id is missing'));
        
                else
                {
                        //Get the Training Event record
                        bcapEvent=[Select Id,Name,Event_Type__c,Host_Account__c,Event_Description__c,Event_Specific_Question__c,Event_Specific_Question_Options__c
                                                                from BCAP_Event__c where Id=: bcapEventId];
                        
                        //Populate member block map
                        memBlockMap = new Map<Id,Id> ();
                        for(Member_Block__c m : [Select Account__c,Event_Type__c from Member_Block__c where Event_Type__c=: bcapEvent.Event_Type__c]){
                                memBlockMap.put(m.Account__c,m.Id);
                        }
                
                        //Get already existing event registrations
                        getRegistrations();
                        
                        //Prepare Event specific Question options
                        prepareEventQ();
                        
                }
                
                //Create the picklist for Search Options to find a contact
                searchOptions= new List<Selectoption> ();
                searchOptions.add(new Selectoption('none','--Select--'));
                searchOptions.add(new Selectoption('member','By Member Account'));
                searchOptions.add(new Selectoption('account','By Account'));
                searchOptions.add(new Selectoption('contact','By Contact'));  
                searchOptions.add(new Selectoption('Decision Maker','By Decision Maker'));      
                searchOptions.add(new Selectoption('Relationship Ambassador','By Relationship Ambassador'));    
                searchOptions.add(new Selectoption('ADMINISTRATOR','By Administrator'));        
                searchOptions.add(new Selectoption('primary','By Primary'));//New
                        //Create the picklist for Search Options to find an event registration
                eventRegSearch= new List<Selectoption> ();
                eventRegSearch.add(new Selectoption('none','--Select--'));
                eventRegSearch.add(new Selectoption('status','By Status'));
                eventRegSearch.add(new Selectoption('attended','By Attended'));
                eventRegSearch.add(new Selectoption('atr','By Activation Team Role')); 
                eventRegSearch.add(new Selectoption('regtype','Registration Type')); 
                eventRegSearch.add(new Selectoption('primary','By Primary'));  // New  
            
                attendedStat = new List<Selectoption> ();
                attendedStat.add(new Selectoption('none','--Select--'));
                attendedStat.add(new Selectoption('true','Attended'));
                attendedStat.add(new Selectoption('false','Not Attended'));  
        
        
        
                //Prepare the picklist for the Status field of Attendee
                Schema.DescribeFieldResult fieldResult = Event_Registration__c.Status__c.getDescribe();
                statusOptions= new List<SelectOption>();
                List<Schema.PicklistEntry> ple = fieldResult.getPicklistValues();
                statusOptions.add(new Selectoption('none','--Select--'));
                for( Schema.PicklistEntry f : ple)
                {       
                         
                      statusOptions.add(new SelectOption(f.getLabel(), f.getValue()));
                   } 
                   
                //Prepare the picklist for the Team Activation Field for Contact
                fieldResult = Contact.Activation_Team_Role__c.getDescribe();
                teamActRole= new List<SelectOption>();
                ple = fieldResult.getPicklistValues();
                teamActRole.add(new Selectoption('none','--Select--'));
                for( Schema.PicklistEntry f : ple)
                {
                          
                      teamActRole.add(new SelectOption(f.getLabel(), f.getValue()));
                }   
                regType= new List<Selectoption>();
                regType.add(new Selectoption('none','--Select--')); 
                for(Schema.PicklistEntry f:Event_Registration__c.Registration_Type__c.getDescribe().getPicklistValues()){
                        regType.add(new Selectoption(f.getLabel(),f.getValue()));
                }
                

                //Member Account picklist 
                memAccPick =new List<Selectoption> ();
                memAccPick.add(new Selectoption('none','--Select--'));
                for(Account acc:  [Select Id,Name,AccountNumber,Type from Account where Type='Member' order by Name asc limit 99 ]){
                        memAccPick.add(new Selectoption(acc.Id,acc.Name));
                }
                
                //Contact role filter
                fieldResult = AccountContactRole.Role.getDescribe();
                conRoles= new List<SelectOption>();
                conRoles.add(new Selectoption('none','--Select--'));
                conRoles.add(new Selectoption('primary','Primary'));
                ple = fieldResult.getPicklistValues();
            
                for( Schema.PicklistEntry f : ple)
              {
                      conRoles.add(new SelectOption(f.getLabel(), f.getValue()));
                   } 
                   
                //Prepare the picklist for Email templates
                //String tempName ='Training Templates';
                String folderName = 'Event: Manage Attendee Emails';
                eTemplateOptions= new List<SelectOption>();
                for(EmailTemplate et : [Select Id, Name, Folder.Name From EmailTemplate Where IsActive = true AND Folder.Name=: folderName order by Name]){
                        eTemplateOptions.add(new SelectOption(et.Id, et.Name));
                }      
                
                
        }
        
        
        //Method to generate Event specific question options picklist
        public void prepareEventQ(){
                attended=true;
                options = new List<SelectOption>(); 
                if(bcapEvent.Event_Specific_Question_Options__c!=null){
                        for(String s : bcapEvent.Event_Specific_Question_Options__c.split(';')){
                        options.add(new SelectOption(s,s));
                        }
                }
                options.add(new SelectOption('others','Others'));
        }
        
        //Method to filter contacts by Role
        public void filterCon(){
                contactListFilter= new List<ContactWrapper>();
                if(selectedConRole!=null){
                        if(selectedConRole.equals('primary')){
                                for(ContactWrapper cw : contactList){
                                        if(cw.isPrimary)
                                                contactListFilter.add(cw);
                                }
                                filtered=true;
                        }
                        else if(selectedConRole.equals('none')){
                                filtered=false;
                        }
                        else{
                                for(ContactWrapper cw : contactList){
                                        if(cw.role!=null && cw.role.equalsIgnoreCase(selectedConRole))
                                                contactListFilter.add(cw);
                                }
                                filtered=true;
                        }
                }
                
                        
        }
        //Method to clear the filter
        public void clearFilter(){
                contactListFilter= new List<ContactWrapper>();
                selectedConRole='none';
                filtered=false;
        }
        
        //Method to get the contact picklist
        public List<Selectoption> getConPicklist(){
                //Member Contact picklist 
                        memConPick =new List<Selectoption> ();
                        memConPick.add(new Selectoption('none','--Select--'));
                        if(memAcc!=null){
                                for(Contact con:  [Select Id,Name,AccountId from Contact where AccountId=: memAcc  limit 99]){
                                        memConPick.add(new Selectoption(con.Id,con.Name));
                                }
                        }
                        return memConPick;
        }
        
        //Method to get the Event registration List
        public void getRegistrations(){
                dupCheck= new Set<Id>();
                
                
                //Clear the filters
                eventRegS='none';
                filterOptionsList = new list<FilterOptions>();
                //List of registrations under this event which are already present  
                        
                regList= new List<AttendeeWrapper>();
                regList_one = new List<AttendeeWrapper>();
                integer tempcounter =0;//Contact__r.HasOptedOutOfEmail,Event__c,Member_Block__c,Event_Specific_Notes__c,Registration_Type__c
                    for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                            Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c
                                                            from Event_Registration__c where Event__c=:bcapEventId]){
                                                                
                                                                if(tempcounter<990)
                                                                    regList.add(new AttendeeWrapper(er));
                                                                else
                                                                    regList_one.add(new AttendeeWrapper(er));
                                                               tempcounter++;   
                                                               
                                                               dupCheck.add(er.Contact__c); 
                                }
                                
        }
        //Method to search in attendee list
        public void searchAtt(){
                String searchText = Apexpages.currentPage().getParameters().get('searchText');
        
        if(searchText!=null && searchText.length()>0){
                String se = '%' +searchText + '%';
                regList= new List<AttendeeWrapper>();
                regList_one = new List<AttendeeWrapper>();
                integer tempcounter =0;//,Contact__r.HasOptedOutOfEmail,Event__c,Member_Block__c,Event_Specific_Notes__c,Registration_Type__c
                        for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                                Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c
                                                                from Event_Registration__c where Event__c=:bcapEventId AND 
                                                                ( Contact__r.Account.Name like :se OR Contact__r.LastName like  :se OR Contact__r.FirstName like :se)
                                                                
                                                                 ]){
                                                                     if(tempcounter<990)
                                                                        regList.add(new AttendeeWrapper(er));
                                                                    else
                                                                        regList_one.add(new AttendeeWrapper(er));
                                                                   tempcounter++;    
                                                                        
                                                                }
            
        }
       
        }
        //Method to filter attendee list
        public void filterAtt(){
            
        /*if(erSearch!=null ){
                
                regList= new List<AttendeeWrapper>();
                regList_one = new List<AttendeeWrapper>();
                integer tempcounter =0;//,Contact__r.HasOptedOutOfEmail,Event__c,Member_Block__c,Event_Specific_Notes__c,Registration_Type__c
                     if(eventRegS=='status') { 
                        for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                                Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c
                                                                from Event_Registration__c where Event__c=:bcapEventId AND 
                                                                Status__c =:erSearch
                                                                
                                                                 ]){
                                                                     if(tempcounter<990)
                                                                        regList.add(new AttendeeWrapper(er));
                                                                    else
                                                                        regList_one.add(new AttendeeWrapper(er));
                                                                   tempcounter++;    
                                                                        
                                                                }
                     }   
                     
                      if(eventRegS=='attended') { 
                        Boolean searchAt=false;
                        if(erSearch=='true')
                                searchAt=true;
                        for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                                Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c
                                                                from Event_Registration__c where Event__c=:bcapEventId AND 
                                                                Attended__c=:searchAt
                                                                
                                                                 ]){
                                                                     if(tempcounter<990)
                                                                        regList.add(new AttendeeWrapper(er));
                                                                    else
                                                                        regList_one.add(new AttendeeWrapper(er));
                                                                   tempcounter++;    
                                                                        
                                                                }
                     }                                                  
                        if(eventRegS=='atr') { 
                        
                        for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                                Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c,
                                                                Contact__r.Activation_Team_Role__c
                                                                from Event_Registration__c where Event__c=:bcapEventId AND 
                                                                Contact__r.Activation_Team_Role__c=:erSearch
                                                                
                                                                 ]){
                                                                     if(tempcounter<990)
                                                                        regList.add(new AttendeeWrapper(er));
                                                                    else
                                                                        regList_one.add(new AttendeeWrapper(er));
                                                                   tempcounter++;    
                                                                        
                                                                }
                     } 
        }*/
                list<FilterOptions> temp = new list<FilterOptions>();
        for(FilterOptions fo:filterOptionsList){
            if(fo.eventRegS!='none'){
                temp.add(fo);
            }
        }
                regList= new List<AttendeeWrapper>();
                regList_one = new List<AttendeeWrapper>();
        if(temp.size()==0){
            //regList= new List<AttendeeWrapper>();
                        //regList_one = new List<AttendeeWrapper>();
            return ;
        }
        String erQuery ='Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name';
                        erQuery+=',Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c';
            erQuery+=' from Event_Registration__c where  Event__c=:bcapEventId ANd ( ';

        integer tc=0;   
        System.debug('in ');                        
        for(FilterOptions fo:temp){
            if(fo.eventRegS=='status'){
                if(fo.erSearch=='none'){
                    erQuery+=' Status__c=null ';
                }else{
                    erQuery+=' Status__c =\''+fo.erSearch+'\'' ;
                }
            }else if(fo.eventRegS=='attended'){
                                if(fo.erSearch=='true'){
                    erQuery+=' Attended__c=true ';
                }else{
                    erQuery+=' Attended__c=false ';
                }
                
            }else if(fo.eventRegS=='atr'){
                if(fo.erSearch=='none'){
                    erQuery+=' Contact__r.Activation_Team_Role__c=null ';
                }else{
                    erQuery+=' Contact__r.Activation_Team_Role__c=\''+fo.erSearch+'\'';
                }
            }else if(fo.eventRegS=='regtype'){
                                if(fo.erSearch=='none'){
                    erQuery+=' Registration_Type__c=null ';
                }else{
                    erQuery+=' Registration_Type__c =\''+fo.erSearch+'\'' ;
                }
                        }
             else if(fo.eventRegS=='primary'){
                    Set<Id> primIds = new Set<Id> ();
                    for(Activation_Team__c act : [Select Contact__c from Activation_Team__c where Primary__c=true])      
                        {
                            primIds.add(act.Contact__c);
                        }      
                    erQuery+='  Contact__c in : primIds';
                
                        }           
            tc++;
            if(tc!=temp.size()){
                erQuery+=' '+fo.condition;
            }
        }
                erQuery+=' )';
                System.debug('the query isout ');
                system.debug(erQuery);
                try{
        //System.debug(database.query(erQuery));
                System.debug('the query is ');
                System.debug(erQuery);
                integer tempcounter =0;
                for(Event_Registration__c er:database.query(erQuery)){
                        if(tempcounter<990)
                                regList.add(new AttendeeWrapper(er));
                        else
                                regList_one.add(new AttendeeWrapper(er));
                        tempcounter++;
                }
                }catch(Exception e){
                       System.debug(e); 
                }
        //-------
       
        }
        //Method to Search for Member Accounts
        public void searchMemAcc(){
                
                if(searchMethod!=null && searchMethod=='member'){
                        popAccount=true;
                accList=[Select Id,Name,AccountNumber,Type from Account where Type='Member'  limit 500];
            contactList=null;
                }
        
        if(searchMethod!=null &&(searchMethod=='none'||searchMethod=='account'||searchMethod=='contact'||searchMethod=='Decision Maker'||searchMethod=='Relationship Ambassador'||searchMethod=='ADMINISTRATOR'  ||searchMethod=='primary')){
            accList = new List<Account>();
            contactList=null;
        }
        
        isByContactRole=false;
        if(searchMethod=='Decision Maker'||searchMethod=='Relationship Ambassador'||searchMethod=='ADMINISTRATOR'){
           isByContactRole=true;  
           contactList= new List<ContactWrapper>();  
            for(Contact c:[Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber,
                        /*(Select ContactId, Role,AccountId,IsPrimary From AccountContactRoles where Role=:searchMethod)*/ 
                        (select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r where AT_Role__c=:searchMethod)
                        from Contact where id in (select Contact__c from Activation_Team__c where AT_Role__c=:searchMethod)/*(Select ContactId From AccountContactRole where Role=:searchMethod)*/ limit 999]){
                contactList.add(new ContactWrapper(c));       
            }  
        }
        //adding this new method to list contact where Is Primary = true
        if(searchMethod=='primary'){
           isByContactRole=true;  
           contactList= new List<ContactWrapper>();  
            for(Contact c:[Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber,
                        /*(Select ContactId, Role,AccountId,IsPrimary From AccountContactRoles where Role=:searchMethod)*/ 
                        (select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r where Primary__c= true)
                        from Contact where id in (select Contact__c from Activation_Team__c where Primary__c= true)/*(Select ContactId From AccountContactRole where Role=:searchMethod)*/ limit 999]){
                contactList.add(new ContactWrapper(c));       
            }  
        }
        }
        
        //Method to Search for accounts()
        public void searchAcc(){
                accName = Apexpages.currentPage().getParameters().get('accname');
                popAccount=true;
        if(accName!=null && accName.length()!=0){
                        String query='%' +accName + '%';
                        accList=[Select Id,Name,AccountNumber from Account where Name like : query OR AccountNumber like : query limit 99];
                }
        }
        //Method to search for contacts based on Name and Email
        public void searchCon(){
                conName = Apexpages.currentPage().getParameters().get('conname');
        conEmail = Apexpages.currentPage().getParameters().get('conemail');
        
        if(conName!=null && conName.length()>0){
                searchContacts(null,'%' +conName + '%',null);
        }
        else if(conEmail!=null && conEmail.length()>0){
                searchContacts(null,null,'%' +conEmail + '%');
        }
        }
        //Method to initiate Search
        public void searchInitiate(){
                
                contactList= new List<ContactWrapper>();
                isByContactRole =false;
                if(searchMethod!=null && searchMethod!='none'){
                        
                        if(searchMethod=='account'  || searchMethod=='member'){
                                popAccount=false;
                                if(accId!=null){
                                        searchContacts(accId,null,null);        
                                }
                        }
                        
                }
                
        }
        
        //Method to search Contact based on account Id OR Contact name or email
        public void searchContacts(Id accId,String name,String email){
                contactList= new List<ContactWrapper>();
                if(accId!=null){
                        for(Contact c : [Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber
                                                         ,(select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r where Contact__r.AccountId =:accId) 
                                                                                from Contact Where AccountId=:accId]){
                                                contactList.add(new ContactWrapper(c));                                         
                                        }
                }
                else if(name!=null){
                        for(Contact c : [Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber
                                                                 ,(select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r) 
                                                                                from Contact Where Name like :name]){
                                                contactList.add(new ContactWrapper(c));                 
                                        }
                        
                }
                else if(email!=null){
                        for(Contact c : [Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber
                                                                ,(select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r) 
                                                                                from Contact Where Email like : email]){
                                                contactList.add(new ContactWrapper(c));                 
                                        }
                }
        }
        //Mehtod to add a new contact
        public void newContact(){
                Id selectedAcc ;
                if(accId!=null)
                        selectedAcc=accId;
                                
                if(selectedAcc!=null)
                        newCon = new Contact(AccountId=selectedAcc);
                else
                        newCon = new Contact(); 
                popNewCon=true;
                                
        }
        
        //Method to save the new contact
        public void saveContact(){
                
                //Update
                try{upsert newCon;
            //Add the new contact to the List
                    contactList.add(new ContactWrapper([Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber from Contact Where Id=:newCon.Id]));            
           }
                catch(Exception e){
                        system.debug(e.getMessage());
                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                        }
                popNewCon=false;        
                
        }
        //Method to mass update the status of selected attendees
    public void massUpdate() {
        List<Event_Registration__c> upList = new List<Event_Registration__c>();
        
                for(AttendeeWrapper aw : regList){
                        if(aw.selected)
                                {
                                        if(massStatus!=null)
                                                        aw.att.Status__c=massStatus;
                                                if(massGuestOf!=null && massGuestOf!='none')    
                                                        aw.att.Guest_Of__c=massGuestOf;
                                        
                                        upList.add(aw.att);
                                        
                                }
                }
                        
                for(AttendeeWrapper aw : regList_one){
                        if(aw.selected)
                                {
                                        if(massStatus!=null)
                                                        aw.att.Status__c=massStatus;
                                                if(massGuestOf!=null && massGuestOf!='none')    
                                                        aw.att.Guest_Of__c=massGuestOf;
                                        
                                        upList.add(aw.att);
                                        
                                }
                }    
                if(upList.size()>0){
                        try{upsert upList;}
                                catch(Exception e){
                                        system.debug(e.getMessage());
                                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                                        }       
                }
                        
                getRegistrations();
                popup2=false;
                                
        
    }
    //Method to mass update the attended status of attendees
    public void attended() {
        List<Event_Registration__c> upList = new List<Event_Registration__c>();
        
                for(AttendeeWrapper aw : regList){
                        if(aw.selected)
                                {
                                        aw.att.Attended__c=attended;
                                        if(bcapEvent.Event_Specific_Question__c!=null){
                                                if(pickValue=='others'){
                                                        aw.att.Event_Specific_Notes__c=otherText;
                                                }
                                                else{
                                                        aw.att.Event_Specific_Notes__c=pickValue;
                                                }
                                        }
                                        upList.add(aw.att);
                                        
                                }
                }
                for(AttendeeWrapper aw : regList_one){
                        if(aw.selected)
                                {
                                        aw.att.Attended__c=attended;
                                        if(bcapEvent.Event_Specific_Question__c!=null){
                                                if(pickValue=='others'){
                                                        aw.att.Event_Specific_Notes__c=otherText;
                                                }
                                                else{
                                                        aw.att.Event_Specific_Notes__c=pickValue;
                                                }
                                        }
                                        upList.add(aw.att);
                                        
                                }
                }    
                if(upList.size()>0){
                        try{upsert upList;}
                                catch(Exception e){
                                        system.debug(e.getMessage());
                                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                                        }       
                }
                        
                getRegistrations();
                popup4=false;
                                
        
    }
    //Method to create attendees record for the selected contacts in bulk
    public void massCreate(){
        List<Event_Registration__c> upList = new List<Event_Registration__c>();
        
        for(ContactWrapper cw: contactList){
                if(cw.selected){
                                if(!dupCheck.contains(cw.c.Id))
                        {
                                        Event_Registration__c reg = new Event_Registration__c(Contact__c=cw.c.Id,Event__c=bcapEventId);
                                        if(memBlockMap.containsKey(cw.c.AccountId))
                                                reg.Member_Block__c=memBlockMap.get(cw.c.AccountId);
                                if(massStatus!=null)
                                        reg.Status__c=massStatus;
                                if(massGuestOf!=null && massGuestOf!='none')    
                                        reg.Guest_Of__c=massGuestOf;
                                upList.add(reg);
                        }  
                        else{
                                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.INFO,'Some Contacts are already registered for the event'));
                        } 
                }
        }
        if(upList.size()>0){
                        try{upsert upList;}
                                catch(Exception e){
                                        system.debug(e.getMessage());
                                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                                        }       
                }
                        
                getRegistrations();
                popup2=false;
    }
    
    //Method to send mass Email to selected attendees
    public void massEmail() {
        list<Id> contactIdList = new list<Id>();
        list<Id> eventRegList =  new list<Id>();
        if(selectedTemplate!=null){
                for(AttendeeWrapper aw : regList){
                    if(aw.selected){
                        contactIdList.add(aw.att.Contact__c);
                        eventRegList.add(aw.att.Id);        
                    }            
                } 
                for(AttendeeWrapper aw : regList_one){
                        if(aw.selected){
                            contactIdList.add(aw.att.Contact__c);
                            eventRegList.add(aw.att.Id);  
                        }   
                }    
                if(contactIdList.size()>0){
                    try{ 
                        futureMassEmail(selectedTemplate,contactIdList,eventRegList);
                    }catch(Exception e){
                        system.debug(e.getMessage());
                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                    }       
                }           
        }
        popup3=false;
    }
    @future    
    public static void futureMassEmail(id selectedTemplate,list<Id> contactIdList,list<Id> eventRegList){
        List<Messaging.SingleEmailMessage> allmsg = new List<Messaging.SingleEmailMessage>();
        User u = [Select Id,Name,Email from User where Id =:  System.UserInfo.getUserId()];
        String replyToEmail = System.UserInfo.getUserEmail();
        for(Integer i=0;i<contactIdList.size();i++){
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            mail.setTemplateID(selectedTemplate);
            mail.setSaveAsActivity(true);
            mail.setTargetObjectId(contactIdList.get(i));//aw.att.Contact__c
            mail.setWhatId(eventRegList.get(i));
            mail.setReplyTo( replyToEmail); 
            mail.setSenderDisplayName( u.Name );   
            mail.setTreatTargetObjectAsRecipient(true);
            allmsg.add(mail);
            System.debug(mail);
        }
        if(allmsg.size()>0)
            Messaging.SendEmailResult[] res = Messaging.sendEmail(allmsg,false);
    }
        //Go back to the Survey
        public PageReference toEvent(){
                
                PageReference pg=new PageReference('/'+bcapEvent.Id);
                return pg;
        }
        
        public list<FilterOptions> filterOptionsList{get;set;}
    public List<Selectoption> filterConditions {get;set;}
    public Integer counter{get;set;}

        public class FilterOptions{
        public String eventRegS{get;set;}
        public String erSearch{get;set;}
        public String condition{get;set;}
        public FilterOptions(){
            condition ='AND';
            eventRegS = 'none';
        }
    }
        public PageReference addFilter(){
        filterOptionsList.add(new FilterOptions());
        return null;
    }
    public PageReference removeFilter(){
        filterOptionsList.remove(counter);
        filterAtt();
                return null;
    }

}
/*
*Created By: Snapp
*Created Date: 18-Jul-2016
*Purpose: Controller for the AttendeeManagementPage
*/
public with sharing class AttendeeManagementController {

    public PageReference sortByContact() {
        return null;
    }


    public PageReference sortByStatus() {
        return null;
    }

        //Duplicate check for existing contacts in event registration
        public Set<Id> dupCheck;
        
        //Search parameters for Event registrations
         public List<Selectoption> eventRegSearch {get;set;}
         public String eventRegS {get;set;}
         public String erSearch {get;set;}
         public List<Selectoption> attendedStat {get;set;}
         public List<Selectoption> teamActRole {get;set;}
         public list<Selectoption> regType{get;set;}
         
        //private final BCAP_Event__c firstOne;
        
        public String bcapEventId; //Survey Id  
        public BCAP_Event__c bcapEvent {get;set;}
        public   List<Selectoption> searchOptions {get;set;} //Picklist for Search Options to find a contact======static added
        public String searchMethod {get;set;} //Selected option to search for contacts
        public List<ContactWrapper> contactList {get;set;}
        public List<ContactWrapper> contactListFilter {get;set;}
        public List<AttendeeWrapper> regList {get;set;}
        public List<AttendeeWrapper> regList_one {get;set;}
        
        //Member Block Population
        public Map<Id,Id> memBlockMap;
        
        
        //Attended popup logic
        public boolean attended {get;set;}
        public List<SelectOption> options {get;set;}
        public String otherText {get;set;}
        public String pickValue {get;set;}
        
        //Search by Account
        public String accName ;
        public List<Account> accList {get;set;}
        public String accId{get;set;}
        public String selectedAccount {get;set;}
        
        //Search by Contact
        public String conName;
        public String conEmail;
        
    //Contacts by Roles
    public boolean isByContactRole{get;set;}
    
        public boolean popAccount {get;set;} //pop up window for account list
        public void showPopAccount (){
                popAccount=true;
        }
        public void hidePopAccount(){
                popAccount=false;
        }
        
        public class ContactWrapper{
                public Contact c {get;set;}
                public boolean selected {get;set;}
                public String role {get;set;}
                public boolean isPrimary {get;set;}
                public ContactWrapper(Contact c){
                        this.c=c;
                        this.selected=false;
                        this.isPrimary=false;
                                for(Activation_Team__c acr : c.Activation_Team__r){
                                        if(acr.Contact__r.AccountId==c.AccountId)
                                                {this.role=acr.AT_Role__c;this.isPrimary=acr.Primary__c;break;}
                                }
                        }
                
                }
        
        
        public boolean popNewCon {get;set;} //pop up window for adding a new contact
        public void showPopNewCon (){
                popNewCon=true;
        }
        public void hidePopNewCon(){
                popNewCon=false;
        }
        public Contact newCon {get;set;}
        
        public boolean popup2 {get;set;} //pop up window for mass update status of attendee
        public void showPopup2 (){
                        isCreate='false';
                        isCreate = Apexpages.currentPage().getParameters().get('isCreate');
                popup2=true;
        }
        public void hidePopup2(){
                popup2=false;
        }
        
        public boolean popup4 {get;set;} //pop up window for Attended button logic
        public void showPopup4 (){
                popup4=true;
        }
        public void hidePopup4(){
                popup4=false;
        }
        
        //For update popUp
        public List<Selectoption> statusOptions {get;set;} //Picklist for Attendee status
        public String massStatus {get;set;}
        public String isCreate {get;set;}
        public String massGuestOf {get;set;}
        public List<Selectoption> memAccPick {get;set;}
        public List<Selectoption> memConPick {get;set;}
        public String memAcc {get;set;}
        
        public class AttendeeWrapper{
                public Event_Registration__c att {get;set;}
                public boolean selected {get;set;}
                public AttendeeWrapper(Event_Registration__c att){
                        this.att=att;
                        this.selected=false;
                }
        }
        
        //filter by contact role
        public List<Selectoption> conRoles {get;set;}
        public String selectedConRole {get;set;}
        public boolean filtered {get;set;}
        
        public boolean popup3 {get;set;} //pop up window for mass email to attendees
        public void showPopup3 (){
                popup3=true;
        }
        public void hidePopup3(){
                popup3=false;
        }
        
        //Send Email to Attendees
        public List<SelectOption> eTemplateOptions {get;set;}
        public String selectedTemplate {get;set;}
        
        public AttendeeManagementController(/*ApexPages.StandardController ctrl*/){
                
                filterOptionsList = new list<FilterOptions>();
        counter=0;
        filterConditions = new list<Selectoption>();
        filterConditions.add(new Selectoption('AND','AND'));
        filterConditions.add(new Selectoption('OR','OR'));


                //this.firstOne = (BCAP_Event__c)stdController.getRecord();
                
                //initialization
                accList=new List<Account>();
                                
                isByContactRole=false;
        
                popAccount=false;
                popNewCon=false;
                filtered=false;
                
                
                
                if(ApexPages.currentPage().getParameters().get('id')!=null)
                        bcapEventId=ApexPages.currentPage().getParameters().get('id');
                //else if(firstOne!=null && firstOne.Id !=null)
                //      bcapEventId     = firstOne.Id;
                if(bcapEventId==null)
                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,'Error: BCAP Event Id is missing'));
        
                else
                {
                        //Get the Training Event record
                        bcapEvent=[Select Id,Name,Event_Type__c,Host_Account__c,Event_Description__c,Event_Specific_Question__c,Event_Specific_Question_Options__c
                                                                from BCAP_Event__c where Id=: bcapEventId];
                        
                        //Populate member block map
                        memBlockMap = new Map<Id,Id> ();
                        for(Member_Block__c m : [Select Account__c,Event_Type__c from Member_Block__c where Event_Type__c=: bcapEvent.Event_Type__c]){
                                memBlockMap.put(m.Account__c,m.Id);
                        }
                
                        //Get already existing event registrations
                        getRegistrations();
                        
                        //Prepare Event specific Question options
                        prepareEventQ();
                        
                }
                
                //Create the picklist for Search Options to find a contact
                searchOptions= new List<Selectoption> ();
                searchOptions.add(new Selectoption('none','--Select--'));
                searchOptions.add(new Selectoption('member','By Member Account'));
                searchOptions.add(new Selectoption('account','By Account'));
                searchOptions.add(new Selectoption('contact','By Contact'));  
                searchOptions.add(new Selectoption('Decision Maker','By Decision Maker'));      
                searchOptions.add(new Selectoption('Relationship Ambassador','By Relationship Ambassador'));    
                searchOptions.add(new Selectoption('ADMINISTRATOR','By Administrator'));        
                searchOptions.add(new Selectoption('primary','By Primary'));//New
                        //Create the picklist for Search Options to find an event registration
                eventRegSearch= new List<Selectoption> ();
                eventRegSearch.add(new Selectoption('none','--Select--'));
                eventRegSearch.add(new Selectoption('status','By Status'));
                eventRegSearch.add(new Selectoption('attended','By Attended'));
                eventRegSearch.add(new Selectoption('atr','By Activation Team Role')); 
                eventRegSearch.add(new Selectoption('regtype','Registration Type')); 
                eventRegSearch.add(new Selectoption('primary','By Primary'));  // New  
            
                attendedStat = new List<Selectoption> ();
                attendedStat.add(new Selectoption('none','--Select--'));
                attendedStat.add(new Selectoption('true','Attended'));
                attendedStat.add(new Selectoption('false','Not Attended'));  
        
        
        
                //Prepare the picklist for the Status field of Attendee
                Schema.DescribeFieldResult fieldResult = Event_Registration__c.Status__c.getDescribe();
                statusOptions= new List<SelectOption>();
                List<Schema.PicklistEntry> ple = fieldResult.getPicklistValues();
                statusOptions.add(new Selectoption('none','--Select--'));
                for( Schema.PicklistEntry f : ple)
                {       
                         
                      statusOptions.add(new SelectOption(f.getLabel(), f.getValue()));
                   } 
                   
                //Prepare the picklist for the Team Activation Field for Contact
                fieldResult = Contact.Activation_Team_Role__c.getDescribe();
                teamActRole= new List<SelectOption>();
                ple = fieldResult.getPicklistValues();
                teamActRole.add(new Selectoption('none','--Select--'));
                for( Schema.PicklistEntry f : ple)
                {
                          
                      teamActRole.add(new SelectOption(f.getLabel(), f.getValue()));
                }   
                regType= new List<Selectoption>();
                regType.add(new Selectoption('none','--Select--')); 
                for(Schema.PicklistEntry f:Event_Registration__c.Registration_Type__c.getDescribe().getPicklistValues()){
                        regType.add(new Selectoption(f.getLabel(),f.getValue()));
                }
                

                //Member Account picklist 
                memAccPick =new List<Selectoption> ();
                memAccPick.add(new Selectoption('none','--Select--'));
                for(Account acc:  [Select Id,Name,AccountNumber,Type from Account where Type='Member' order by Name asc limit 99 ]){
                        memAccPick.add(new Selectoption(acc.Id,acc.Name));
                }
                
                //Contact role filter
                fieldResult = AccountContactRole.Role.getDescribe();
                conRoles= new List<SelectOption>();
                conRoles.add(new Selectoption('none','--Select--'));
                conRoles.add(new Selectoption('primary','Primary'));
                ple = fieldResult.getPicklistValues();
            
                for( Schema.PicklistEntry f : ple)
              {
                      conRoles.add(new SelectOption(f.getLabel(), f.getValue()));
                   } 
                   
                //Prepare the picklist for Email templates
                //String tempName ='Training Templates';
                String folderName = 'Event: Manage Attendee Emails';
                eTemplateOptions= new List<SelectOption>();
                for(EmailTemplate et : [Select Id, Name, Folder.Name From EmailTemplate Where IsActive = true AND Folder.Name=: folderName order by Name]){
                        eTemplateOptions.add(new SelectOption(et.Id, et.Name));
                }      
                
                
        }
        
        
        //Method to generate Event specific question options picklist
        public void prepareEventQ(){
                attended=true;
                options = new List<SelectOption>(); 
                if(bcapEvent.Event_Specific_Question_Options__c!=null){
                        for(String s : bcapEvent.Event_Specific_Question_Options__c.split(';')){
                        options.add(new SelectOption(s,s));
                        }
                }
                options.add(new SelectOption('others','Others'));
        }
        
        //Method to filter contacts by Role
        public void filterCon(){
                contactListFilter= new List<ContactWrapper>();
                if(selectedConRole!=null){
                        if(selectedConRole.equals('primary')){
                                for(ContactWrapper cw : contactList){
                                        if(cw.isPrimary)
                                                contactListFilter.add(cw);
                                }
                                filtered=true;
                        }
                        else if(selectedConRole.equals('none')){
                                filtered=false;
                        }
                        else{
                                for(ContactWrapper cw : contactList){
                                        if(cw.role!=null && cw.role.equalsIgnoreCase(selectedConRole))
                                                contactListFilter.add(cw);
                                }
                                filtered=true;
                        }
                }
                
                        
        }
        //Method to clear the filter
        public void clearFilter(){
                contactListFilter= new List<ContactWrapper>();
                selectedConRole='none';
                filtered=false;
        }
        
        //Method to get the contact picklist
        public List<Selectoption> getConPicklist(){
                //Member Contact picklist 
                        memConPick =new List<Selectoption> ();
                        memConPick.add(new Selectoption('none','--Select--'));
                        if(memAcc!=null){
                                for(Contact con:  [Select Id,Name,AccountId from Contact where AccountId=: memAcc  limit 99]){
                                        memConPick.add(new Selectoption(con.Id,con.Name));
                                }
                        }
                        return memConPick;
        }
        
        //Method to get the Event registration List
        public void getRegistrations(){
                dupCheck= new Set<Id>();
                
                
                //Clear the filters
                eventRegS='none';
                filterOptionsList = new list<FilterOptions>();
                //List of registrations under this event which are already present  
                        
                regList= new List<AttendeeWrapper>();
                regList_one = new List<AttendeeWrapper>();
                integer tempcounter =0;//Contact__r.HasOptedOutOfEmail,Event__c,Member_Block__c,Event_Specific_Notes__c,Registration_Type__c
                    for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                            Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c
                                                            from Event_Registration__c where Event__c=:bcapEventId]){
                                                                
                                                                if(tempcounter<990)
                                                                    regList.add(new AttendeeWrapper(er));
                                                                else
                                                                    regList_one.add(new AttendeeWrapper(er));
                                                               tempcounter++;   
                                                               
                                                               dupCheck.add(er.Contact__c); 
                                }
                                
        }
        //Method to search in attendee list
        public void searchAtt(){
                String searchText = Apexpages.currentPage().getParameters().get('searchText');
        
        if(searchText!=null && searchText.length()>0){
                String se = '%' +searchText + '%';
                regList= new List<AttendeeWrapper>();
                regList_one = new List<AttendeeWrapper>();
                integer tempcounter =0;//,Contact__r.HasOptedOutOfEmail,Event__c,Member_Block__c,Event_Specific_Notes__c,Registration_Type__c
                        for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                                Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c
                                                                from Event_Registration__c where Event__c=:bcapEventId AND 
                                                                ( Contact__r.Account.Name like :se OR Contact__r.LastName like  :se OR Contact__r.FirstName like :se)
                                                                
                                                                 ]){
                                                                     if(tempcounter<990)
                                                                        regList.add(new AttendeeWrapper(er));
                                                                    else
                                                                        regList_one.add(new AttendeeWrapper(er));
                                                                   tempcounter++;    
                                                                        
                                                                }
            
        }
       
        }
        //Method to filter attendee list
        public void filterAtt(){
            
        /*if(erSearch!=null ){
                
                regList= new List<AttendeeWrapper>();
                regList_one = new List<AttendeeWrapper>();
                integer tempcounter =0;//,Contact__r.HasOptedOutOfEmail,Event__c,Member_Block__c,Event_Specific_Notes__c,Registration_Type__c
                     if(eventRegS=='status') { 
                        for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                                Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c
                                                                from Event_Registration__c where Event__c=:bcapEventId AND 
                                                                Status__c =:erSearch
                                                                
                                                                 ]){
                                                                     if(tempcounter<990)
                                                                        regList.add(new AttendeeWrapper(er));
                                                                    else
                                                                        regList_one.add(new AttendeeWrapper(er));
                                                                   tempcounter++;    
                                                                        
                                                                }
                     }   
                     
                      if(eventRegS=='attended') { 
                        Boolean searchAt=false;
                        if(erSearch=='true')
                                searchAt=true;
                        for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                                Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c
                                                                from Event_Registration__c where Event__c=:bcapEventId AND 
                                                                Attended__c=:searchAt
                                                                
                                                                 ]){
                                                                     if(tempcounter<990)
                                                                        regList.add(new AttendeeWrapper(er));
                                                                    else
                                                                        regList_one.add(new AttendeeWrapper(er));
                                                                   tempcounter++;    
                                                                        
                                                                }
                     }                                                  
                        if(eventRegS=='atr') { 
                        
                        for(Event_Registration__c er : [Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name,
                                                                Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c,
                                                                Contact__r.Activation_Team_Role__c
                                                                from Event_Registration__c where Event__c=:bcapEventId AND 
                                                                Contact__r.Activation_Team_Role__c=:erSearch
                                                                
                                                                 ]){
                                                                     if(tempcounter<990)
                                                                        regList.add(new AttendeeWrapper(er));
                                                                    else
                                                                        regList_one.add(new AttendeeWrapper(er));
                                                                   tempcounter++;    
                                                                        
                                                                }
                     } 
        }*/
                list<FilterOptions> temp = new list<FilterOptions>();
        for(FilterOptions fo:filterOptionsList){
            if(fo.eventRegS!='none'){
                temp.add(fo);
            }
        }
                regList= new List<AttendeeWrapper>();
                regList_one = new List<AttendeeWrapper>();
        if(temp.size()==0){
            //regList= new List<AttendeeWrapper>();
                        //regList_one = new List<AttendeeWrapper>();
            return ;
        }
        String erQuery ='Select Id,Name,Contact__c,Contact__r.Account.Name,Contact__r.Email,Contact__r.Name';
                        erQuery+=',Guest_Of__c,Guest_Of__r.name,Attended__c,Status__c';
            erQuery+=' from Event_Registration__c where  Event__c=:bcapEventId ANd ( ';

        integer tc=0;   
        System.debug('in ');                        
        for(FilterOptions fo:temp){
            if(fo.eventRegS=='status'){
                if(fo.erSearch=='none'){
                    erQuery+=' Status__c=null ';
                }else{
                    erQuery+=' Status__c =\''+fo.erSearch+'\'' ;
                }
            }else if(fo.eventRegS=='attended'){
                                if(fo.erSearch=='true'){
                    erQuery+=' Attended__c=true ';
                }else{
                    erQuery+=' Attended__c=false ';
                }
                
            }else if(fo.eventRegS=='atr'){
                if(fo.erSearch=='none'){
                    erQuery+=' Contact__r.Activation_Team_Role__c=null ';
                }else{
                    erQuery+=' Contact__r.Activation_Team_Role__c=\''+fo.erSearch+'\'';
                }
            }else if(fo.eventRegS=='regtype'){
                                if(fo.erSearch=='none'){
                    erQuery+=' Registration_Type__c=null ';
                }else{
                    erQuery+=' Registration_Type__c =\''+fo.erSearch+'\'' ;
                }
                        }
             else if(fo.eventRegS=='primary'){
                    Set<Id> primIds = new Set<Id> ();
                    for(Activation_Team__c act : [Select Contact__c from Activation_Team__c where Primary__c=true])      
                        {
                            primIds.add(act.Contact__c);
                        }      
                    erQuery+='  Contact__c in : primIds';
                
                        }           
            tc++;
            if(tc!=temp.size()){
                erQuery+=' '+fo.condition;
            }
        }
                erQuery+=' )';
                System.debug('the query isout ');
                system.debug(erQuery);
                try{
        //System.debug(database.query(erQuery));
                System.debug('the query is ');
                System.debug(erQuery);
                integer tempcounter =0;
                for(Event_Registration__c er:database.query(erQuery)){
                        if(tempcounter<990)
                                regList.add(new AttendeeWrapper(er));
                        else
                                regList_one.add(new AttendeeWrapper(er));
                        tempcounter++;
                }
                }catch(Exception e){
                       System.debug(e); 
                }
        //-------
       
        }
        //Method to Search for Member Accounts
        public void searchMemAcc(){
                
                if(searchMethod!=null && searchMethod=='member'){
                        popAccount=true;
                accList=[Select Id,Name,AccountNumber,Type from Account where Type='Member'  limit 500];
            contactList=null;
                }
        
        if(searchMethod!=null &&(searchMethod=='none'||searchMethod=='account'||searchMethod=='contact'||searchMethod=='Decision Maker'||searchMethod=='Relationship Ambassador'||searchMethod=='ADMINISTRATOR'  ||searchMethod=='primary')){
            accList = new List<Account>();
            contactList=null;
        }
        
        isByContactRole=false;
        if(searchMethod=='Decision Maker'||searchMethod=='Relationship Ambassador'||searchMethod=='ADMINISTRATOR'){
           isByContactRole=true;  
           contactList= new List<ContactWrapper>();  
            for(Contact c:[Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber,
                        /*(Select ContactId, Role,AccountId,IsPrimary From AccountContactRoles where Role=:searchMethod)*/ 
                        (select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r where AT_Role__c=:searchMethod)
                        from Contact where id in (select Contact__c from Activation_Team__c where AT_Role__c=:searchMethod)/*(Select ContactId From AccountContactRole where Role=:searchMethod)*/ limit 999]){
                contactList.add(new ContactWrapper(c));       
            }  
        }
        //adding this new method to list contact where Is Primary = true
        if(searchMethod=='primary'){
           isByContactRole=true;  
           contactList= new List<ContactWrapper>();  
            for(Contact c:[Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber,
                        /*(Select ContactId, Role,AccountId,IsPrimary From AccountContactRoles where Role=:searchMethod)*/ 
                        (select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r where Primary__c= true)
                        from Contact where id in (select Contact__c from Activation_Team__c where Primary__c= true)/*(Select ContactId From AccountContactRole where Role=:searchMethod)*/ limit 999]){
                contactList.add(new ContactWrapper(c));       
            }  
        }
        }
        
        //Method to Search for accounts()
        public void searchAcc(){
                accName = Apexpages.currentPage().getParameters().get('accname');
                popAccount=true;
        if(accName!=null && accName.length()!=0){
                        String query='%' +accName + '%';
                        accList=[Select Id,Name,AccountNumber from Account where Name like : query OR AccountNumber like : query limit 99];
                }
        }
        //Method to search for contacts based on Name and Email
        public void searchCon(){
                conName = Apexpages.currentPage().getParameters().get('conname');
        conEmail = Apexpages.currentPage().getParameters().get('conemail');
        
        if(conName!=null && conName.length()>0){
                searchContacts(null,'%' +conName + '%',null);
        }
        else if(conEmail!=null && conEmail.length()>0){
                searchContacts(null,null,'%' +conEmail + '%');
        }
        }
        //Method to initiate Search
        public void searchInitiate(){
                
                contactList= new List<ContactWrapper>();
                isByContactRole =false;
                if(searchMethod!=null && searchMethod!='none'){
                        
                        if(searchMethod=='account'  || searchMethod=='member'){
                                popAccount=false;
                                if(accId!=null){
                                        searchContacts(accId,null,null);        
                                }
                        }
                        
                }
                
        }
        
        //Method to search Contact based on account Id OR Contact name or email
        public void searchContacts(Id accId,String name,String email){
                contactList= new List<ContactWrapper>();
                if(accId!=null){
                        for(Contact c : [Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber
                                                         ,(select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r where Contact__r.AccountId =:accId) 
                                                                                from Contact Where AccountId=:accId]){
                                                contactList.add(new ContactWrapper(c));                                         
                                        }
                }
                else if(name!=null){
                        for(Contact c : [Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber
                                                                 ,(select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r) 
                                                                                from Contact Where Name like :name]){
                                                contactList.add(new ContactWrapper(c));                 
                                        }
                        
                }
                else if(email!=null){
                        for(Contact c : [Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber
                                                                ,(select Id,Contact__c,AT_Role__c,Contact__r.AccountId,Primary__c from Activation_Team__r) 
                                                                                from Contact Where Email like : email]){
                                                contactList.add(new ContactWrapper(c));                 
                                        }
                }
        }
        //Mehtod to add a new contact
        public void newContact(){
                Id selectedAcc ;
                if(accId!=null)
                        selectedAcc=accId;
                                
                if(selectedAcc!=null)
                        newCon = new Contact(AccountId=selectedAcc);
                else
                        newCon = new Contact(); 
                popNewCon=true;
                                
        }
        
        //Method to save the new contact
        public void saveContact(){
                
                //Update
                try{upsert newCon;
            //Add the new contact to the List
                    contactList.add(new ContactWrapper([Select Id,Name,Title,Email,AccountId,Account.Name,Account.AccountNumber from Contact Where Id=:newCon.Id]));            
           }
                catch(Exception e){
                        system.debug(e.getMessage());
                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                        }
                popNewCon=false;        
                
        }
        //Method to mass update the status of selected attendees
    public void massUpdate() {
        List<Event_Registration__c> upList = new List<Event_Registration__c>();
        
                for(AttendeeWrapper aw : regList){
                        if(aw.selected)
                                {
                                        if(massStatus!=null)
                                                        aw.att.Status__c=massStatus;
                                                if(massGuestOf!=null && massGuestOf!='none')    
                                                        aw.att.Guest_Of__c=massGuestOf;
                                        
                                        upList.add(aw.att);
                                        
                                }
                }
                        
                for(AttendeeWrapper aw : regList_one){
                        if(aw.selected)
                                {
                                        if(massStatus!=null)
                                                        aw.att.Status__c=massStatus;
                                                if(massGuestOf!=null && massGuestOf!='none')    
                                                        aw.att.Guest_Of__c=massGuestOf;
                                        
                                        upList.add(aw.att);
                                        
                                }
                }    
                if(upList.size()>0){
                        try{upsert upList;}
                                catch(Exception e){
                                        system.debug(e.getMessage());
                                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                                        }       
                }
                        
                getRegistrations();
                popup2=false;
                                
        
    }
    //Method to mass update the attended status of attendees
    public void attended() {
        List<Event_Registration__c> upList = new List<Event_Registration__c>();
        
                for(AttendeeWrapper aw : regList){
                        if(aw.selected)
                                {
                                        aw.att.Attended__c=attended;
                                        if(bcapEvent.Event_Specific_Question__c!=null){
                                                if(pickValue=='others'){
                                                        aw.att.Event_Specific_Notes__c=otherText;
                                                }
                                                else{
                                                        aw.att.Event_Specific_Notes__c=pickValue;
                                                }
                                        }
                                        upList.add(aw.att);
                                        
                                }
                }
                for(AttendeeWrapper aw : regList_one){
                        if(aw.selected)
                                {
                                        aw.att.Attended__c=attended;
                                        if(bcapEvent.Event_Specific_Question__c!=null){
                                                if(pickValue=='others'){
                                                        aw.att.Event_Specific_Notes__c=otherText;
                                                }
                                                else{
                                                        aw.att.Event_Specific_Notes__c=pickValue;
                                                }
                                        }
                                        upList.add(aw.att);
                                        
                                }
                }    
                if(upList.size()>0){
                        try{upsert upList;}
                                catch(Exception e){
                                        system.debug(e.getMessage());
                                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                                        }       
                }
                        
                getRegistrations();
                popup4=false;
                                
        
    }
    //Method to create attendees record for the selected contacts in bulk
    public void massCreate(){
        List<Event_Registration__c> upList = new List<Event_Registration__c>();
        
        for(ContactWrapper cw: contactList){
                if(cw.selected){
                                if(!dupCheck.contains(cw.c.Id))
                        {
                                        Event_Registration__c reg = new Event_Registration__c(Contact__c=cw.c.Id,Event__c=bcapEventId);
                                        if(memBlockMap.containsKey(cw.c.AccountId))
                                                reg.Member_Block__c=memBlockMap.get(cw.c.AccountId);
                                if(massStatus!=null)
                                        reg.Status__c=massStatus;
                                if(massGuestOf!=null && massGuestOf!='none')    
                                        reg.Guest_Of__c=massGuestOf;
                                upList.add(reg);
                        }  
                        else{
                                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.INFO,'Some Contacts are already registered for the event'));
                        } 
                }
        }
        if(upList.size()>0){
                        try{upsert upList;}
                                catch(Exception e){
                                        system.debug(e.getMessage());
                                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                                        }       
                }
                        
                getRegistrations();
                popup2=false;
    }
    
    //Method to send mass Email to selected attendees
    public void massEmail() {
        list<Id> contactIdList = new list<Id>();
        list<Id> eventRegList =  new list<Id>();
        if(selectedTemplate!=null){
                for(AttendeeWrapper aw : regList){
                    if(aw.selected){
                        contactIdList.add(aw.att.Contact__c);
                        eventRegList.add(aw.att.Id);        
                    }            
                } 
                for(AttendeeWrapper aw : regList_one){
                        if(aw.selected){
                            contactIdList.add(aw.att.Contact__c);
                            eventRegList.add(aw.att.Id);  
                        }   
                }    
                if(contactIdList.size()>0){
                    try{ 
                        futureMassEmail(selectedTemplate,contactIdList,eventRegList);
                    }catch(Exception e){
                        system.debug(e.getMessage());
                        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,e.getMessage()));
                    }       
                }           
        }
        popup3=false;
    }
    @future    
    public static void futureMassEmail(id selectedTemplate,list<Id> contactIdList,list<Id> eventRegList){
        List<Messaging.SingleEmailMessage> allmsg = new List<Messaging.SingleEmailMessage>();
        User u = [Select Id,Name,Email from User where Id =:  System.UserInfo.getUserId()];
        String replyToEmail = System.UserInfo.getUserEmail();
        for(Integer i=0;i<contactIdList.size();i++){
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            mail.setTemplateID(selectedTemplate);
            mail.setSaveAsActivity(true);
            mail.setTargetObjectId(contactIdList.get(i));//aw.att.Contact__c
            mail.setWhatId(eventRegList.get(i));
            mail.setReplyTo( replyToEmail); 
            mail.setSenderDisplayName( u.Name );   
            mail.setTreatTargetObjectAsRecipient(true);
            allmsg.add(mail);
            System.debug(mail);
        }
        if(allmsg.size()>0)
            Messaging.SendEmailResult[] res = Messaging.sendEmail(allmsg,false);
    }
        //Go back to the Survey
        public PageReference toEvent(){
                
                PageReference pg=new PageReference('/'+bcapEvent.Id);
                return pg;
        }
        
        public list<FilterOptions> filterOptionsList{get;set;}
    public List<Selectoption> filterConditions {get;set;}
    public Integer counter{get;set;}

        public class FilterOptions{
        public String eventRegS{get;set;}
        public String erSearch{get;set;}
        public String condition{get;set;}
        public FilterOptions(){
            condition ='AND';
            eventRegS = 'none';
        }
    }
        public PageReference addFilter(){
        filterOptionsList.add(new FilterOptions());
        return null;
    }
    public PageReference removeFilter(){
        filterOptionsList.remove(counter);
        filterAtt();
                return null;
    }

}
